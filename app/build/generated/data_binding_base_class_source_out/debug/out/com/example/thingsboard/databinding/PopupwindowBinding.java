// Generated by view binder compiler. Do not edit!
package com.example.thingsboard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.thingsboard.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PopupwindowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button dialogCancel;

  @NonNull
  public final Button dialogOk;

  @NonNull
  public final EditText edDeviceAddress;

  @NonNull
  public final EditText edDeviceName;

  @NonNull
  public final Spinner spProjectDevice;

  private PopupwindowBinding(@NonNull LinearLayout rootView, @NonNull Button dialogCancel,
      @NonNull Button dialogOk, @NonNull EditText edDeviceAddress, @NonNull EditText edDeviceName,
      @NonNull Spinner spProjectDevice) {
    this.rootView = rootView;
    this.dialogCancel = dialogCancel;
    this.dialogOk = dialogOk;
    this.edDeviceAddress = edDeviceAddress;
    this.edDeviceName = edDeviceName;
    this.spProjectDevice = spProjectDevice;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PopupwindowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PopupwindowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.popupwindow, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PopupwindowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dialog_cancel;
      Button dialogCancel = ViewBindings.findChildViewById(rootView, id);
      if (dialogCancel == null) {
        break missingId;
      }

      id = R.id.dialog_ok;
      Button dialogOk = ViewBindings.findChildViewById(rootView, id);
      if (dialogOk == null) {
        break missingId;
      }

      id = R.id.ed_device_address;
      EditText edDeviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (edDeviceAddress == null) {
        break missingId;
      }

      id = R.id.ed_device_name;
      EditText edDeviceName = ViewBindings.findChildViewById(rootView, id);
      if (edDeviceName == null) {
        break missingId;
      }

      id = R.id.sp_project_device;
      Spinner spProjectDevice = ViewBindings.findChildViewById(rootView, id);
      if (spProjectDevice == null) {
        break missingId;
      }

      return new PopupwindowBinding((LinearLayout) rootView, dialogCancel, dialogOk,
          edDeviceAddress, edDeviceName, spProjectDevice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
